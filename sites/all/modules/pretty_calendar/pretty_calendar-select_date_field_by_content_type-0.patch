diff --git a/pretty_calendar.module b/pretty_calendar.module
index 23c66fb..fd8d666 100644
--- a/pretty_calendar.module
+++ b/pretty_calendar.module
@@ -103,7 +103,6 @@ function pretty_calendar_block_configure($delta = '') {
 
   $node_types = node_type_get_types();
   $node_type_options = array();
-  $node_type_options[''] = t('All node types');
   foreach ($node_types as $node_type) {
     $node_type_options[$node_type->type] = $node_type->name;
   }
@@ -129,48 +128,51 @@ function pretty_calendar_block_configure($delta = '') {
     '#description' => t('Select calendar appearance.'),
   );
 
-  $form['pretty_calendar_node_type'] = array(
-    '#type' => 'checkboxes',
-    '#options' => $node_type_options,
-    '#multiple' => TRUE,
-    '#title' => t('Node type'),
-    '#default_value' => explode(',', variable_get('pretty_calendar_node_type', '')),
-    '#description' => t('Select node type.'),
-  );
-  $form['pretty_calendar_node_invert'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('Invert selection.'),
-    '#default_value' => variable_get('pretty_calendar_node_invert', FALSE),
-  );
-
-  // Search date fields.
+  // Select field by node type.
   $fields = field_info_fields();
-  $fields_options[''] = t('Node creation date');
-
   $date_module = module_exists('date');
-  if ($date_module) {
-    $field_desc = t('Select field that contains the date of the event. By default, nodes will be selected by date of creation.');
-    foreach ($fields as $field_type => $field_data) {
-      if ($field_data['module'] == 'date') {
-        $fields_options[$field_type] = $field_type;
+  foreach ($node_type_options as $type => $name) {
+    // Select this node type
+    $form['pretty_calendar_node_type_' . $type] = array(
+      '#type' => 'checkbox',
+      '#title' => $name,
+      '#default_value' => variable_get('pretty_calendar_node_type_' . $type, ''),
+    );
+
+    // Search date fields.
+    $fields_options = array();
+    $fields_options[''] = t('Node creation date');
+
+    if ($date_module) {
+      $field_desc = t('Select field that contains the date of the event. By default, nodes will be selected by date of creation.');
+      foreach ($fields as $field_type => $field_data) {
+        if ($field_data['module'] == 'date' && isset($field_data['bundles']['node']) && in_array($type, $field_data['bundles']['node'])) {
+          $fields_options[$field_type] = $field_type;
+        }
+      }
+      if (count($fields_options) == 1) {
+        $field_desc = '<span style="color:red; font-weight:bold;">' . t('There are no date fields') . '</span>';
       }
     }
-    if (count($fields_options) == 1) {
-      $field_desc = '<span style="color:red; font-weight:bold;">' . t('There are no date fields') . '</span>';
+    else {
+      $field_desc = '<span style="color:red; font-weight:bold;">' . t('<a href="http://drupal.org/project/date" target="_blank">Date</a> module is not installed') . '</span>';
     }
-  }
-  else {
-    $field_desc = '<span style="color:red; font-weight:bold;">' . t('<a href="http://drupal.org/project/date" target="_blank">Date</a> module is not installed') . '</span>';
+
+    // If checked select date field
+    $form['pretty_calendar_field_date_' . $type] = array(
+      '#type' => 'select',
+      '#options' => $fields_options,
+      '#disabled' => !$date_module,
+      '#default_value' => variable_get('pretty_calendar_field_date_' . $type, ''),
+      '#description' => $field_desc,
+      '#states' => array(
+        'visible' => array(
+          ':input[name="pretty_calendar_node_type_' . $type . '"]' => array('checked' => TRUE),
+        ),
+      ),
+    );
   }
 
-  $form['pretty_calendar_field_date'] = array(
-    '#type' => 'select',
-    '#options' => $fields_options,
-    '#disabled' => !$date_module,
-    '#title' => t('Date field'),
-    '#default_value' => variable_get('pretty_calendar_field_date', ''),
-    '#description' => $field_desc,
-  );
   $form['pretty_calendar_title_words'] = array(
     '#type' => 'textfield',
     '#size' => 64,
@@ -217,9 +219,16 @@ function pretty_calendar_block_configure($delta = '') {
 function pretty_calendar_block_save($delta = '', $edit = array()) {
   variable_set('pretty_calendar_page_title', $edit['pretty_calendar_page_title']);
   variable_set('pretty_calendar_theme', $edit['pretty_calendar_theme']);
-  variable_set('pretty_calendar_node_type', implode(",", $edit['pretty_calendar_node_type']));
-  variable_set('pretty_calendar_node_invert', $edit['pretty_calendar_node_invert']);
-  variable_set('pretty_calendar_field_date', $edit['pretty_calendar_field_date']);
+  $node_types = node_type_get_types();
+  foreach ($node_types as $type => $name) {
+    variable_set('pretty_calendar_node_type_' . $type, $edit['pretty_calendar_node_type_' . $type]);
+    if (!$edit['pretty_calendar_node_type_' . $type]) {
+      variable_del('pretty_calendar_field_date_' . $type);
+    }
+    else {
+      variable_set('pretty_calendar_field_date_' . $type, $edit['pretty_calendar_field_date_' . $type]);
+    }
+  }
   variable_set('pretty_calendar_node_per_page', $edit['pretty_calendar_node_per_page']);
   variable_set('pretty_calendar_title_words', $edit['pretty_calendar_title_words']);
   variable_set('pretty_calendar_preload_tooltips', $edit['pretty_calendar_preload_tooltips']);
@@ -246,10 +255,9 @@ function pretty_calendar_block_view($delta = '') {
   }
 
   if (arg(0) == 'node' && arg(1) > 0) {
-    $types = explode(',', variable_get('pretty_calendar_node_type', ''));
-    $use_all = in_array('', $types);
+    $types = pretty_calendar_get_selected_type();
     $node = node_load(arg(1));
-    if ($use_all || (in_array($node->type, $types) && !$use_all)) {
+    if (array_key_exists($node->type, $types)) {
       $m = date('m', $node->created);
       $y = date('Y', $node->created);
     }
@@ -329,8 +337,6 @@ function pretty_calendar_block_content($month) {
 
   // Get month name. Add context to t() for extended translation.
   $month_name = t(format_date($month, 'custom', 'F', NULL, 'en'), array(), array('context' => 'Nominative')) . ' ' . date('Y', $month);
-  $field_name = variable_get('pretty_calendar_field_date', '');
-  $node_type = variable_get('pretty_calendar_node_type', '');
   $use_tooltips = variable_get('pretty_calendar_preload_tooltips', '-');
   $use_tooltips = $use_tooltips == '-' ? FALSE : TRUE;
 
@@ -347,7 +353,7 @@ function pretty_calendar_block_content($month) {
   }
   else {
     foreach ($nids as $row) {
-      $field_name = variable_get('pretty_calendar_field_date', '');
+      $field_name = variable_get('pretty_calendar_field_date_' . $row->type, '');
       if ($field_name != '') {
         $field_name .= '_value';
       }
@@ -508,62 +514,55 @@ function pretty_calendar_plural($count) {
  */
 function pretty_calendar_select_nodes($date = 0, $links_only = FALSE) {
   global $language;
-  $field_name = variable_get('pretty_calendar_field_date', '');
-  $node_types = explode(',', variable_get('pretty_calendar_node_type', ''));
-
-  // Check if field was deleted.
-  if (field_info_field($field_name) == '') {
-    $field_name = '';
-  }
+  $selected = pretty_calendar_get_selected_type();
+  $result = array();
 
-  // Select nodes without date field.
-  $select = db_select('node', 'n')
-    ->fields('n', array('nid', 'title', 'created'))
-    ->condition('n.status', 1);
-  // Multilanguage condition.
-  if (variable_get('pretty_calendar_separate_languages', FALSE)) {
-    $select->condition('n.language', $language->language);
-  }
-  // Check date.
-  if ($date > 0) {
-    if ($field_name == '') {
-      $select
-        ->condition('created', $date, '>=')
-        ->condition('created', $date + 86400, '<');
+  foreach ($selected as $node_type => $value) {
+    $field_name = $value['field'];
+    // Check if field was deleted.
+    if (field_info_field($field_name) == '') {
+      $field_name = '';
     }
-    else {
-      $select->distinct();
-      $select->leftJoin('field_data_' . $field_name, 'fd', 'fd.entity_id = n.nid');
-      $select->fields('fd', array($field_name . '_value'));
-      $select->where('DATE(' . $field_name . '_value) = :date', array(':date' => date('Y.m.d', $date)));
+    // Select nodes without date field.
+    $select = db_select('node', 'n')
+      ->fields('n', array('nid', 'title', 'created', 'type'))
+      ->condition('n.status', 1);
+    // Multilanguage condition.
+    if (variable_get('pretty_calendar_separate_languages', FALSE)) {
+      $select->condition('n.language', $language->language);
     }
-  }
-  // Check types.
-  if ($node_types[0] != '') {
-    if (variable_get('pretty_calendar_node_invert', FALSE)) {
-      $select->condition('n.type', $node_types, 'NOT IN');
+    // Check date.
+    if ($date > 0) {
+      if ($field_name == '') {
+        $select
+          ->condition('created', $date, '>=')
+          ->condition('created', $date + 86400, '<');
+      }
+      else {
+        $select->distinct();
+        $select->leftJoin('field_data_' . $field_name, 'fd', 'fd.entity_id = n.nid');
+        $select->fields('fd', array($field_name . '_value'));
+        $select->where('DATE(' . $field_name . '_value) = :date', array(':date' => date('Y.m.d', $date)));
+      }
     }
-    else {
-      $select->condition('n.type', $node_types, 'IN');
+    // Check types.
+    $select->condition('n.type', $node_type, '=');
+    $select->orderBy('n.sticky', 'DESC')
+      ->orderBy('n.created', 'DESC');
+    if (!$links_only) {
+      $select->extend('PagerDefault')
+        ->limit(variable_get('pretty_calendar_node_per_page', '20'))
+        ->addTag('node_access');
+      $result = array_merge($result, $select->execute()->fetchCol());
     }
-  }
-  $select->orderBy('n.sticky', 'DESC')
-    ->orderBy('n.created', 'DESC');
-
-  if (!$links_only) {
-    $select->extend('PagerDefault')
-      ->limit(variable_get('pretty_calendar_node_per_page', '20'))
-      ->addTag('node_access');
-    return $select->execute()->fetchCol();
-  }
-  else {
-    $select->addTag('node_access');
-    $result = array();
-    foreach ($select->execute() as $row) {
-      $result[] = $row;
+    else {
+      $select->addTag('node_access');
+      foreach ($select->execute() as $row) {
+        $result[] = $row;
+      }
     }
-    return $result;
   }
+  return $result;
 }
 
 /**
@@ -577,58 +576,50 @@ function pretty_calendar_select_nodes($date = 0, $links_only = FALSE) {
  */
 function pretty_calendar_select_month_nodes($date = 0) {
   global $language;
-  $field_name = variable_get('pretty_calendar_field_date', '');
-  $node_types = explode(',', variable_get('pretty_calendar_node_type', ''));
-
-  // Check if field was deleted.
-  if (field_info_field($field_name) == '') {
-    $field_name = '';
-  }
+  $selected = pretty_calendar_get_selected_type();
+  $result = array();
 
-  // Select nodes without date field.
-  $select = db_select('node', 'n')
-    ->fields('n', array('nid', 'title', 'created'))
-    ->condition('n.status', 1);
-  // Multilanguage condition.
-  if (variable_get('pretty_calendar_separate_languages', FALSE)) {
-    $select->condition('n.language', $language->language);
-  }
-  // Check date.
-  if ($date > 0) {
-    if ($field_name == '') {
-      $select
-        ->condition('created', mktime(0, 0, 0, date('m', $date), 1, date('Y', $date)), '>=')
-        ->condition('created', mktime(0, 0, 0, date('m', $date) + 1, 1, date('Y', $date)), '<');
+  foreach ($selected as $node_type => $value) {
+    $field_name = $value['field'];
+    // Check if field was deleted.
+    if (field_info_field($field_name) == '') {
+      $field_name = '';
     }
-    else {
-      $select->distinct();
-      $select->leftJoin('field_data_' . $field_name, 'fd', 'fd.entity_id = n.nid');
-      $select->fields('fd', array($field_name . '_value'));
-      $select->where('DATE_FORMAT(fd.' . $field_name . '_value, \'%Y%m\') = :stamp', array(':stamp' => date('Ym', $date)));
+
+    // Select nodes without date field.
+    $select = db_select('node', 'n')
+      ->fields('n', array('nid', 'title', 'created', 'type'))
+      ->condition('n.status', 1);
+    // Multilanguage condition.
+    if (variable_get('pretty_calendar_separate_languages', FALSE)) {
+      $select->condition('n.language', $language->language);
     }
-  }
-  // Check types.
-  if ($node_types[0] != '') {
-    if (variable_get('pretty_calendar_node_invert', FALSE)) {
-      $select->condition('n.type', $node_types, 'NOT IN');
+    // Check date.
+    if ($date > 0) {
+      if ($field_name == '') {
+        $select
+          ->condition('created', mktime(0, 0, 0, date('m', $date), 1, date('Y', $date)), '>=')
+          ->condition('created', mktime(0, 0, 0, date('m', $date) + 1, 1, date('Y', $date)), '<');
+      }
+      else {
+        $select->distinct();
+        $select->leftJoin('field_data_' . $field_name, 'fd', 'fd.entity_id = n.nid');
+        $select->fields('fd', array($field_name . '_value'));
+        $select->where('DATE_FORMAT(fd.' . $field_name . '_value, \'%Y%m\') = :stamp', array(':stamp' => date('Ym', $date)));
+      }
     }
-    else {
-      $select->condition('n.type', $node_types, 'IN');
+    // Check types.
+    $select->condition('n.type', $node_type, '=');
+    $select->addTag('node_access');
+    try {
+      foreach ($select->execute() as $row) {
+        $result[] = $row;
+      }
     }
-  }
-  $select->addTag('node_access');
-
-  $result = array();
-
-  try {
-    foreach ($select->execute() as $row) {
-      $result[] = $row;
+    catch (Exception $e) {
+      $result['error'] = $e;
     }
   }
-  catch (Exception $e) {
-    $result['error'] = $e;
-  }
-
   return $result;
 }
 
@@ -686,3 +677,32 @@ function pretty_calendar_node_list($date = 0) {
 
   return drupal_render($build);
 }
+
+/**
+ * Get selected node type
+ * @return array
+ */
+function pretty_calendar_get_selected_type() {
+  $selected = &drupal_static(__FUNCTION__, array());
+  if ($selected) {
+    return $selected;
+  }
+
+  $node_types = node_type_get_types();
+
+  foreach ($node_types as $type => $name) {
+    if (variable_get('pretty_calendar_node_type_' . $type, FALSE)) {
+      $field = variable_get('pretty_calendar_field_date_' . $type, '');
+      $selected[$type] = array('name' => $name, 'field' => $field);
+    }
+  }
+  return $selected;
+}
+
+/**
+ * Implements hook_node_type_delete().
+ */
+function pretty_calendar_node_type_delete($info) {
+  variable_del('pretty_calendar_node_type_' . $info->type);
+  variable_del('pretty_calendar_field_date_' . $info->type);
+}
